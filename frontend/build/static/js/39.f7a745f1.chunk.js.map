{"version":3,"file":"static/js/39.f7a745f1.chunk.js","mappings":"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","sources":["../node_modules/ionicons/dist/esm/index-RzboMlQJ.js","../node_modules/ionicons/dist/esm/ion-icon.entry.js"],"sourcesContent":["import { a as getAssetPath } from './index-Z3yp5Yym.js';\n\nlet CACHED_MAP;\nconst getIconMap = () => {\n    if (typeof window === 'undefined') {\n        return new Map();\n    }\n    else {\n        if (!CACHED_MAP) {\n            const win = window;\n            win.Ionicons = win.Ionicons || {};\n            CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n        }\n        return CACHED_MAP;\n    }\n};\nconst addIcons = (icons) => {\n    Object.keys(icons).forEach((name) => {\n        addToIconMap(name, icons[name]);\n        /**\n         * Developers can also pass in the SVG object directly\n         * and Ionicons can map the object to a kebab case name.\n         * Example: addIcons({ addCircleOutline });\n         * This will create an \"addCircleOutline\" entry and\n         * an \"add-circle-outline\" entry.\n         * Usage: <ion-icon name=\"add-circle-outline\"></ion-icon>\n         * Using name=\"addCircleOutline\" is valid too, but the\n         * kebab case naming is preferred.\n         */\n        const toKebabCase = name.replace(/([a-z0-9]|(?=[A-Z]))([A-Z0-9])/g, '$1-$2').toLowerCase();\n        if (name !== toKebabCase) {\n            addToIconMap(toKebabCase, icons[name]);\n        }\n    });\n};\nconst addToIconMap = (name, data) => {\n    const map = getIconMap();\n    const existingIcon = map.get(name);\n    if (existingIcon === undefined) {\n        map.set(name, data);\n        /**\n         * Importing and defining the same icon reference\n         * multiple times should not yield a warning.\n         */\n    }\n    else if (existingIcon !== data) {\n        console.warn(`[Ionicons Warning]: Multiple icons were mapped to name \"${name}\". Ensure that multiple icons are not mapped to the same icon name.`);\n    }\n};\nconst getUrl = (i) => {\n    let url = getSrc(i.src);\n    if (url) {\n        return url;\n    }\n    url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n    if (url) {\n        return getNamedUrl(url, i);\n    }\n    if (i.icon) {\n        url = getSrc(i.icon);\n        if (url) {\n            return url;\n        }\n        url = getSrc(i.icon[i.mode]);\n        if (url) {\n            return url;\n        }\n    }\n    return null;\n};\nconst getNamedUrl = (iconName, iconEl) => {\n    const url = getIconMap().get(iconName);\n    if (url) {\n        return url;\n    }\n    try {\n        return getAssetPath(`svg/${iconName}.svg`);\n    }\n    catch (e) {\n        console.log('e', e);\n        /**\n         * In the custom elements build version of ionicons, referencing an icon\n         * by name will throw an invalid URL error because the asset path is not defined.\n         * This catches that error and logs something that is more developer-friendly.\n         * We also include a reference to the ion-icon element so developers can\n         * figure out which instance of ion-icon needs to be updated.\n         */\n        console.warn(`[Ionicons Warning]: Could not load icon with name \"${iconName}\". Ensure that the icon is registered using addIcons or that the icon SVG data is passed directly to the icon component.`, iconEl);\n    }\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n    // default to \"md\" if somehow the mode wasn't set\n    mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n    // if an icon was passed in using the ios or md attributes\n    // set the iconName to whatever was passed in\n    if (ios && mode === 'ios') {\n        iconName = toLower(ios);\n    }\n    else if (md && mode === 'md') {\n        iconName = toLower(md);\n    }\n    else {\n        if (!iconName && icon && !isSrc(icon)) {\n            iconName = icon;\n        }\n        if (isStr(iconName)) {\n            iconName = toLower(iconName);\n        }\n    }\n    if (!isStr(iconName) || iconName.trim() === '') {\n        return null;\n    }\n    // only allow alpha characters and dash\n    const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n    if (invalidChars !== '') {\n        return null;\n    }\n    return iconName;\n};\nconst getSrc = (src) => {\n    if (isStr(src)) {\n        src = src.trim();\n        if (isSrc(src)) {\n            return src;\n        }\n    }\n    return null;\n};\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = (val) => typeof val === 'string';\nconst toLower = (val) => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n    const attributeObject = {};\n    attributes.forEach((attr) => {\n        if (el.hasAttribute(attr)) {\n            const value = el.getAttribute(attr);\n            if (value !== null) {\n                attributeObject[attr] = el.getAttribute(attr);\n            }\n            el.removeAttribute(attr);\n        }\n    });\n    return attributeObject;\n};\n/**\n * Returns `true` if the document or host element\n * has a `dir` set to `rtl`. The host value will always\n * take priority over the root document value.\n */\nconst isRTL = (hostEl) => {\n    if (hostEl) {\n        if (hostEl.dir !== '') {\n            return hostEl.dir.toLowerCase() === 'rtl';\n        }\n    }\n    return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\n\nexport { inheritAttributes as a, getName as b, isRTL as c, addIcons as d, getUrl as g, isStr as i };\n","import { r as registerInstance, h, H as Host, g as getElement } from './index-Z3yp5Yym.js';\nimport { i as isStr, a as inheritAttributes, g as getUrl, b as getName, c as isRTL } from './index-RzboMlQJ.js';\n\nconst validateContent = (svgContent) => {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n        if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n            div.removeChild(div.childNodes[i]);\n        }\n    }\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n        const svgClass = svgElm.getAttribute('class') || '';\n        svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n        // root element must be an svg\n        // lets double check we've got valid elements\n        // do not allow scripts\n        if (isValid(svgElm)) {\n            return div.innerHTML;\n        }\n    }\n    return '';\n};\nconst isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const name = elm.attributes[i].name;\n            if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nconst isSvgDataUrl = (url) => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = (url) => url.indexOf(';utf8,') !== -1;\n\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n    const svg = '';\n    ioniconContent.set(url, svg);\n    return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n    /**\n     * See if we already have a request for this url\n     */\n    const req = requests.get(url);\n    if (req) {\n        return req;\n    }\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n        /**\n         * If the url is a data url of an svg, then try to parse it\n         * with the DOMParser. This works with content security policies enabled.\n         */\n        if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n            return Promise.resolve(getSvgByUrl(url));\n        }\n        return fetchSvg(url, sanitize);\n    }\n    return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n    if (!parser) {\n        /**\n         * Create an instance of the DOM parser. This creates a single\n         * parser instance for the entire app, which is more efficient.\n         */\n        parser = new DOMParser();\n    }\n    const doc = parser.parseFromString(url, 'text/html');\n    const svg = doc.querySelector('svg');\n    if (svg) {\n        ioniconContent.set(url, svg.outerHTML);\n        return svg.outerHTML;\n    }\n    throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n    /**\n     * We don't already have a request\n     */\n    const req = fetch(url)\n        .then((rsp) => {\n        /**\n         * When fetching from a file:// URL, some browsers return\n         * a 0 status code even when the request succeeds so don't\n         * rely on rsp.ok as the only signal of success.\n         */\n        return rsp\n            .text()\n            .then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n                svgContent = validateContent(svgContent);\n            }\n            const svg = svgContent || '';\n            ioniconContent.set(url, svg);\n            return svg;\n        })\n            .catch(() => safeFallback(url));\n    })\n        .catch(() => safeFallback(url));\n    /**\n     * Cache for the same requests\n     */\n    requests.set(url, req);\n    return req;\n}\n\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\n\nconst Icon = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.iconName = null;\n        this.inheritedAttributes = {};\n        this.didLoadIcon = false;\n        this.isVisible = false;\n        /**\n         * The mode determines which platform styles to use.\n         */\n        this.mode = getIonMode();\n        /**\n         * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n         * Default, `false`.\n         */\n        this.lazy = false;\n        /**\n         * When set to `false`, SVG content that is HTTP fetched will not be checked\n         * if the response SVG content has any `<script>` elements, or any attributes\n         * that start with `on`, such as `onclick`.\n         * @default true\n         */\n        this.sanitize = true;\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n    }\n    connectedCallback() {\n        /**\n         * purposely do not return the promise here because loading\n         * the svg file should not hold up loading the app\n         * only load the svg if it's visible\n         */\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n    /**\n     * Loads the icon after the component has finished rendering.\n     */\n    componentDidLoad() {\n        /**\n         * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n         * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n         * This modification pertains to the usage of Angular's binding syntax:\n         * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n         */\n        if (!this.didLoadIcon) {\n            this.loadIcon();\n        }\n    }\n    /**\n     * Disconnect the IntersectionObserver.\n     */\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    /**\n     * Wait until the icon is visible in the viewport.\n     * @param el - The element to observe.\n     * @param rootMargin - The root margin of the observer.\n     * @param cb - The callback to call when the element is visible.\n     */\n    waitUntilVisible(el, rootMargin, cb) {\n        /**\n         * IntersectionObserver is a browser API that allows you to observe\n         * the visibility of an element relative to a root element. It is\n         * supported in all modern browsers, except IE and when server-side\n         * rendering.\n         */\n        const hasIntersectionObserverSupport = Boolean(this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n        /**\n         * browser doesn't support IntersectionObserver\n         * so just fallback to always show it\n         */\n        if (!hasIntersectionObserverSupport) {\n            return cb();\n        }\n        const io = (this.io = new window.IntersectionObserver((data) => {\n            if (data[0].isIntersecting) {\n                io.disconnect();\n                this.io = undefined;\n                cb();\n            }\n        }, { rootMargin }));\n        io.observe(el);\n    }\n    /**\n     * Watch for changes to the icon name, src, icon, ios, or md properties.\n     * When a change is detected, the icon will be loaded.\n     */\n    loadIcon() {\n        if (this.isVisible) {\n            const url = getUrl(this);\n            if (url) {\n                if (ioniconContent.has(url)) {\n                    // sync if it's already loaded\n                    this.svgContent = ioniconContent.get(url);\n                }\n                else {\n                    // async if it hasn't been loaded\n                    getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n                }\n                this.didLoadIcon = true;\n            }\n        }\n        this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n    }\n    render() {\n        const { flipRtl, iconName, inheritedAttributes, el } = this;\n        const mode = this.mode || 'md';\n        /**\n         * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n         * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n         */\n        const shouldAutoFlip = iconName\n            ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false\n            : false;\n        /**\n         * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n         */\n        const shouldBeFlippable = flipRtl || shouldAutoFlip;\n        return (h(Host, Object.assign({ key: '0578c899781ca145dd8205acd9670af39b57cf2e', role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': shouldBeFlippable, 'icon-rtl': shouldBeFlippable && isRTL(el) }) }, inheritedAttributes), this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n    }\n    static get assetsDirs() { return [\"svg\"]; }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"name\": [\"loadIcon\"],\n        \"src\": [\"loadIcon\"],\n        \"icon\": [\"loadIcon\"],\n        \"ios\": [\"loadIcon\"],\n        \"md\": [\"loadIcon\"]\n    }; }\n};\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => (typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = (color) => {\n    return color\n        ? {\n            'ion-color': true,\n            [`ion-color-${color}`]: true,\n        }\n        : null;\n};\nIcon.style = iconCss;\n\nexport { Icon as ion_icon };\n"],"names":["CACHED_MAP","getIconMap","window","Map","win","Ionicons","map","getNamedUrl","iconName","iconEl","url","get","getAssetPath","concat","e","console","log","warn","getName","icon","mode","ios","md","toLower","isSrc","isStr","trim","replace","getSrc","src","str","length","test","val","toLowerCase","isValid","elm","nodeType","nodeName","i","attributes","name","indexOf","childNodes","ioniconContent","requests","parser","safeFallback","set","getSvgContent","sanitize","req","fetch","document","startsWith","isSvgDataUrl","isEncodedDataUrl","Promise","resolve","DOMParser","doc","parseFromString","svg","querySelector","outerHTML","Error","getSvgByUrl","then","rsp","text","svgContent","div","createElement","innerHTML","removeChild","svgElm","firstElementChild","svgClass","getAttribute","setAttribute","validateContent","catch","fetchSvg","Icon","constructor","hostRef","registerInstance","this","inheritedAttributes","didLoadIcon","isVisible","getIonMode","lazy","componentWillLoad","el","attributeObject","arguments","undefined","forEach","attr","hasAttribute","removeAttribute","inheritAttributes","connectedCallback","waitUntilVisible","loadIcon","componentDidLoad","disconnectedCallback","io","disconnect","rootMargin","cb","Boolean","IntersectionObserver","data","isIntersecting","observe","getUrl","has","render","flipRtl","shouldAutoFlip","includes","shouldBeFlippable","h","Host","Object","assign","key","role","class","createColorClasses","color","size","hostEl","dir","assetsDirs","getElement","watchers","documentElement","style"],"sourceRoot":""}